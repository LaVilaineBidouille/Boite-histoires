
/*

La Vilaine Bidouille
Avril 2025
v 1 A
    
    
 
Connexions sur Nano:

RC 522 : 

SDA   pin 10 vert
SCK   pin 13 orange
MOSI  pin 11 violet
MISO  pin 12 blanc
---
GND   GND    bleu
RESET pin 9  jaune
VCC   3.3v   rouge

DF PLAYER : 

VCC     5v
RX  résistance 1K  pin 5
TX      pin 6
Busy    pin 7
GND     GND

Anneau WS2812

Di      pin 4     jaune
VCC     5v          rouge 
GND               noir



 Touch
Dout    pin 2     vert
VCC     5v        rouge 
GND               noir
 
*/



#include <SPI.h>
#include <MFRC522.h>
#include <DFRobotDFPlayerMini.h>
#include <FastLED.h>

#include <SoftwareSerial.h>

 
#define RST_PIN         9           
#define SS_PIN          10 


/*
  ID des cartes pour Charlotte
  04C783A26A2681
  04D383A26A2681
  04D183A26A2681
  04DA83A26A2681
  04CF83A26A2681
  04D983A26A2681
  04BA7EA26A2681
  04B97EA26A2681
  04D283A26A2681
  04BF7EA26A2681


  ID des cartes pour Pauline
  049C83A26A2681
  04A883A26A2681
  04A783A26A2681
  04A683A26A2681
  04A583A26A2681
  04B183A26A2681
  04AF83A26A2681
  04AE83A26A2681
  04AD83A26A2681
  04B983A26A2681

  ID des cartes Vilaine Bidouille
  04111D14BD2A81
  04EF2314BD2A81
  04C23314BD2A81
  04B32C14BD2A81
  04984214BD2A81
  04C44A14BD2A81
  04DE5114BD2A81
  04665B14BD2A81
  043C3D14BD2A81

  
*/

 
MFRC522 mfrc522(SS_PIN, RST_PIN);                             // Create MFRC522 instance
SoftwareSerial softSerial(/*rx =*/6, /*tx =*/5);
DFRobotDFPlayerMini myDFPlayer;

#define LED_PIN     4
#define NUM_LEDS    24
#define BRIGHTNESS  64
#define LED_TYPE    WS2812
#define COLOR_ORDER GRB
CRGB leds[NUM_LEDS];


uint8_t buf[10]= {};
MFRC522::Uid id;
MFRC522::Uid id2;
bool is_card_present = false;
uint8_t control = 0x00;
String temp;
int piste = 0;
int EnPause = 0;
bool bouton_actif = false;
bool fin_lecture = true;
int event = 0;
unsigned long lastEvent = 0;

#define TOUCH_PIN    2
#define BUSY_PIN     7

void PlayPause(){
  
  if (bouton_actif==false) return;
  
  if (digitalRead(BUSY_PIN) == 0){
    DFPause();
  }
  else
    DFStart();
}

void DFPause(){
    myDFPlayer.pause();
    EnPause=1;
    Fade_down ();
    Serial.println("Pause DFPlayer");
}

void DFStart(){

    if (digitalRead(BUSY_PIN) == 1 && EnPause==0){
      myDFPlayer.playMp3Folder(piste);   
      fin_lecture=0;           
    }
    else {
      myDFPlayer.start();
      EnPause=0;
    }  
    Serial.println("Start DFPlayer");
    
    
    for ( int i = 0; i < NUM_LEDS; i++)  {             // on remet la luminosité à la reprise du son 
      leds[i].maximizeBrightness();
    }
    FastLED.show();
    
  
}

void  Fade_down (){
  for ( int i = 0; i < NUM_LEDS; i++)  {
    leds[i].fadeLightBy(192);                           // on baisse la luminosité lorsque le son est en pause
    
  }

  FastLED.show();
 
}

void spinningRainbow() {
  // variable used for the initial hue of the rainbow
  // we start it out at 0
  // but since it's static, it'll keep it's value as we change it
  static byte initialHue = 0;
  
  // increase the hue by 1 each time
  initialHue = initialHue + 1;
  
  // the amount we want the hue to change between each LED
  // by dividing the number of hues (255), by the number of LEDs,
  // this code makes each LED a different color
  // and covers the entire rainbow spectrum (red, orange, yellow, green, blue, indigo, violet)
  byte changeInHue = 255 / NUM_LEDS;
  
  // use FastLED to fill the LEDs with a rainbow
  fill_rainbow(leds, NUM_LEDS, initialHue, changeInHue);
}



 
void setup(){
  delay(3000);                                                 // Attente stabilisation alimentation
  pinMode(TOUCH_PIN,INPUT);                                    // broche connectée au Touch TTP223 : valeur 0  par défaut et 1 si on le touche
  pinMode(BUSY_PIN,INPUT);                                     // broche connectée à BUSY du DFPLAYER  : valeur 0 en lecture - valeur 1 au repos

  attachInterrupt(digitalPinToInterrupt(TOUCH_PIN), PlayPause, RISING);


  Serial.begin(9600);                                           // Initialize serial communications with the PC
  softSerial.begin(9600);                                       // Initialize serial communications with DFPlayer
  SPI.begin();                                                  // Init SPI bus
  mfrc522.PCD_Init(); 
 
  if (!myDFPlayer.begin(softSerial, /*isACK = */true, /*doReset = */true)) {  //softSerial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while(true);
    delay(0); // Code to compatible with ESP8266 watch dog.   
   }
   Serial.println(F("DFPlayer Mini online."));
  
   myDFPlayer.setTimeOut(500); //Set serial communication time out 500ms
   myDFPlayer.volume(25);  //Set volume value. From 0 to 30

  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
  FastLED.setBrightness(  BRIGHTNESS );

  fill_solid(leds, NUM_LEDS, CRGB::Black);
  FastLED.show();

 
}


void PisteSelect(uint8_t *data, uint8_t length) // Selection piste selon carte reconnue
{
     String idCard=""; 
    
     char tmp[16];
     for (int i=0; i<length; i++) { 
       sprintf(tmp, "%.2X",data[i]); 
       // Serial.print(tmp); // Serial.print(" ");
       idCard=idCard+tmp;
     }
     Serial.println(idCard); 

     piste = 99; // si la carte n'est pas déclarée on lira la piste 99

     if (idCard.equals("047E6214BD2A81")) piste = 1;   // RFID Vilaine Bidouille
     if (idCard.equals("04111D14BD2A81")) piste = 2;
     if (idCard.equals("04EF2314BD2A81")) piste = 3;
     if (idCard.equals("04C23314BD2A81")) piste = 4;
     if (idCard.equals("04B32C14BD2A81")) piste = 5;
     if (idCard.equals("04984214BD2A81")) piste = 6;
     if (idCard.equals("04C44A14BD2A81")) piste = 7;
     if (idCard.equals("04DE5114BD2A81")) piste = 8;
     if (idCard.equals("04665B14BD2A81")) piste = 9;
     if (idCard.equals("043C3D14BD2A81")) piste = 10;
}
  
//*****************************************************************************************//
 
void cpid(MFRC522::Uid *id){
  memset(id, 0, sizeof(MFRC522::Uid));
  memcpy(id->uidByte, mfrc522.uid.uidByte, mfrc522.uid.size);
  id->size = mfrc522.uid.size;
  id->sak = mfrc522.uid.sak;
}
 
void loop(){
  
  piste=0;                   
  bouton_actif=false;

  // Placer ici le code pour gérer les couleurs d'attente  - avant le return 
  spinningRainbow();
  FastLED.show(); 
 
  // Look for new cards                      // si absence de cartes alors return = retourne au début de loop tout le reste n'est pas executé tant qu'il n'y a pas de carte RFID
  if ( !mfrc522.PICC_IsNewCardPresent()) {
    return;
  }
  if ( !mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  bouton_actif = true;
  bool result = true;
  uint8_t buf_len=4;
  cpid(&id);
  Serial.print("Présence carte ID : ");
  
  PisteSelect(id.uidByte, id.size);  

  Serial.print("Lecture piste n° : ");Serial.println(piste);

  // on peut lancer la lecture 
  
  fin_lecture = false;
  myDFPlayer.playMp3Folder(piste);  //play specific mp3 in SD:/MP3/0004.mp3; File Name(0~65535)
  
  fill_solid(leds, NUM_LEDS, leds[1]);   // Configuration des leds avec la couleur de la led[1] au moment de la pose de la carte
  // fill_solid(leds, NUM_LEDS, CRGB::Magenta);   // Configuration des leds avec une couleur fixe
  FastLED.show();                              // Affichage de la couleur sur les leds
  
  while(true){                                 // On reste dans cette boucle while tant qu'une carte est détectée par le lecteur

    control=0;
    for(int i=0; i<3; i++){
      if(!mfrc522.PICC_IsNewCardPresent()){
        if(mfrc522.PICC_ReadCardSerial()){
          // Serial.print('a');
          control |= 0x16;
        }
        if(mfrc522.PICC_ReadCardSerial()){
          // Serial.print('b');
          control |= 0x16;
        }
          // Serial.print('c');
          control += 0x1;
      }
      // Serial.print('d');
      control += 0x4;
    }
    
     
    // Serial.println(control);
    if(control == 13 || control == 14){
      //card is still there
      
      // Serial.print("Pause : "); Serial.println(EnPause); 
      // Serial.print("Busy  : "); Serial.println(digitalRead(BUSY_PIN)); 

     
      if (fin_lecture == 0 && digitalRead(BUSY_PIN) == 1 && EnPause==0){       // on denombre le nombre d'evenements consécutifs indiquant une fin de lecture cela pour compenser le décalage d'info sur la broche busy
        
        if ((millis()-lastEvent) < 300 ){
          event++;
        }
        else {
          event=0;
        }
        lastEvent = millis();
        Serial.print("Event : "); Serial.println(event);   
      }
      if (fin_lecture == 0 && event >= 8) {              // avec 8 event on est a peu près sûr de la fin de lecture 
        fin_lecture=1;
        Fade_down ();
      }
    } 
    else {
      break;
    }
  }
  
  Serial.println("Retrait de la carte"); 
  myDFPlayer.stop();                           // on stoppe la lecture avec la détection retrait carte
    
  delay(1000); //change value if you want to read cards faster
 
}
